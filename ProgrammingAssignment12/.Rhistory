mydata$PROPDMGEXP[is.na(mydata$PROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$PROPDMGEXP[!grepl("K|M|B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$PROPDMGEXP[grep("K", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$PROPDMGEXP[grep("M", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$PROPDMGEXP[grep("B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$PROPDMGEXP <- as.numeric(as.character(mydata$PROPDMGEXP))
mydata$property.damage <- mydata$PROPDMG * 10^mydata$PROPDMGEXP
mydata$CROPDMGEXP <- as.character(mydata$CROPDMGEXP)
mydata$CROPDMGEXP[is.na(mydata$CROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$CROPDMGEXP[!grepl("K|M|B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$CROPDMGEXP[grep("K", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$CROPDMGEXP[grep("M", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$CROPDMGEXP[grep("B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$CROPDMGEXP <- as.numeric(as.character(mydata$CROPDMGEXP))
mydata$crop.damage <- mydata$CROPDMG * 10^mydata$CROPDMGEXP
sort(table(mydata$property.damage), decreasing = TRUE)[1:10]
sort(table(mydata$crop.damage), decreasing = TRUE)[1:10]
summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
colnames(mydata)
mydata.EVENT
mydata$EVENT
group_by(mydata, EVENT)
rm(list=ls())
library(data.table)
library(base)
library(utils)
library(plyr)
library(dplyr)
library(ggplot2)
summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
rm(list=ls())
library(data.table)
library(base)
library(utils)
library(plyr)
library(dplyr)
library(ggplot2)
dim(storm.data)
if(!exists("storm.data")) {
storm.data<-read.csv(bzfile("repdata_data_StormData.csv.bz2"),header = TRUE)
}
dim(storm.data)
str(storm.data)
vars <- c( "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
mydata <- storm.data[, vars]
tail(mydata)
c(sum(is.na(mydata$FATALITIES)),sum(is.na(mydata$INJURIES)), sum(is.na(mydata$PROPDMG)), sum(is.na(mydata$CROPDMG)), sum(is.na(mydata$PROPDMGEXP)), sum(is.na(mydata$CROPDMGEXP)))
sort(table(mydata$EVTYPE), decreasing = TRUE)[1:10]
# create a new variable EVENT to transform variable EVTYPE in groups
mydata$EVENT <- "OTHER"
# group by keyword in EVTYPE
mydata$EVENT[grep("HAIL", mydata$EVTYPE, ignore.case = TRUE)] <- "HAIL"
mydata$EVENT[grep("HEAT", mydata$EVTYPE, ignore.case = TRUE)] <- "HEAT"
mydata$EVENT[grep("FLOOD", mydata$EVTYPE, ignore.case = TRUE)] <- "FLOOD"
mydata$EVENT[grep("WIND", mydata$EVTYPE, ignore.case = TRUE)] <- "WIND"
mydata$EVENT[grep("STORM", mydata$EVTYPE, ignore.case = TRUE)] <- "STORM"
mydata$EVENT[grep("SNOW", mydata$EVTYPE, ignore.case = TRUE)] <- "SNOW"
mydata$EVENT[grep("TORNADO", mydata$EVTYPE, ignore.case = TRUE)] <- "TORNADO"
mydata$EVENT[grep("WINTER", mydata$EVTYPE, ignore.case = TRUE)] <- "WINTER"
mydata$EVENT[grep("RAIN", mydata$EVTYPE, ignore.case = TRUE)] <- "RAIN"
# listing the transformed event types
sort(table(mydata$EVENT), decreasing = TRUE)
sort(table(mydata$PROPDMGEXP), decreasing = TRUE)[1:10]
sort(table(mydata$CROPDMGEXP), decreasing = TRUE)[1:10]
mydata$PROPDMGEXP <- as.character(mydata$PROPDMGEXP)
mydata$PROPDMGEXP[is.na(mydata$PROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$PROPDMGEXP[!grepl("K|M|B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$PROPDMGEXP[grep("K", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$PROPDMGEXP[grep("M", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$PROPDMGEXP[grep("B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$PROPDMGEXP <- as.numeric(as.character(mydata$PROPDMGEXP))
mydata$property.damage <- mydata$PROPDMG * 10^mydata$PROPDMGEXP
mydata$CROPDMGEXP <- as.character(mydata$CROPDMGEXP)
mydata$CROPDMGEXP[is.na(mydata$CROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$CROPDMGEXP[!grepl("K|M|B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$CROPDMGEXP[grep("K", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$CROPDMGEXP[grep("M", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$CROPDMGEXP[grep("B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$CROPDMGEXP <- as.numeric(as.character(mydata$CROPDMGEXP))
mydata$crop.damage <- mydata$CROPDMG * 10^mydata$CROPDMGEXP
sort(table(mydata$property.damage), decreasing = TRUE)[1:10]
sort(table(mydata$crop.damage), decreasing = TRUE)[1:10]
agg.fatalities.and.injuries <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries$type <- "fatalities and injuries"
# aggregate FATALITIES by type of EVENT
agg.fatalities <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalities$type <- "fatalities"
# aggregate INJURIES by type of EVENT
agg.injuries <- summarize(group_by(mydata, EVENT), Total = sum(INJURIES, na.rm = TRUE))
agg.injuries$type <- "injuries"
# combine all
agg.health <- rbind(agg.fatalities, agg.injuries)
health.by.event <- join(agg.fatalities, agg.injuries, by="EVENT", type="inner")
agg.fatalities.and.injuries
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
if(!exists("storm.data")) {
storm.data<-read.csv(bzfile("repdata_data_StormData.csv.bz2"),header = TRUE)
}
dim(storm.data)
str(storm.data)
vars <- c( "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
mydata <- storm.data[, vars]
tail(mydata)
c(sum(is.na(mydata$FATALITIES)),sum(is.na(mydata$INJURIES)), sum(is.na(mydata$PROPDMG)), sum(is.na(mydata$CROPDMG)), sum(is.na(mydata$PROPDMGEXP)), sum(is.na(mydata$CROPDMGEXP)))
sort(table(mydata$EVTYPE), decreasing = TRUE)[1:10]
# create a new variable EVENT to transform variable EVTYPE in groups
mydata$EVENT <- "OTHER"
# group by keyword in EVTYPE
mydata$EVENT[grep("HAIL", mydata$EVTYPE, ignore.case = TRUE)] <- "HAIL"
mydata$EVENT[grep("HEAT", mydata$EVTYPE, ignore.case = TRUE)] <- "HEAT"
mydata$EVENT[grep("FLOOD", mydata$EVTYPE, ignore.case = TRUE)] <- "FLOOD"
mydata$EVENT[grep("WIND", mydata$EVTYPE, ignore.case = TRUE)] <- "WIND"
mydata$EVENT[grep("STORM", mydata$EVTYPE, ignore.case = TRUE)] <- "STORM"
mydata$EVENT[grep("SNOW", mydata$EVTYPE, ignore.case = TRUE)] <- "SNOW"
mydata$EVENT[grep("TORNADO", mydata$EVTYPE, ignore.case = TRUE)] <- "TORNADO"
mydata$EVENT[grep("WINTER", mydata$EVTYPE, ignore.case = TRUE)] <- "WINTER"
mydata$EVENT[grep("RAIN", mydata$EVTYPE, ignore.case = TRUE)] <- "RAIN"
# listing the transformed event types
sort(table(mydata$EVENT), decreasing = TRUE)
sort(table(mydata$PROPDMGEXP), decreasing = TRUE)[1:10]
sort(table(mydata$CROPDMGEXP), decreasing = TRUE)[1:10]
mydata$PROPDMGEXP <- as.character(mydata$PROPDMGEXP)
mydata$PROPDMGEXP[is.na(mydata$PROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$PROPDMGEXP[!grepl("K|M|B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$PROPDMGEXP[grep("K", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$PROPDMGEXP[grep("M", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$PROPDMGEXP[grep("B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$PROPDMGEXP <- as.numeric(as.character(mydata$PROPDMGEXP))
mydata$property.damage <- mydata$PROPDMG * 10^mydata$PROPDMGEXP
mydata$CROPDMGEXP <- as.character(mydata$CROPDMGEXP)
mydata$CROPDMGEXP[is.na(mydata$CROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$CROPDMGEXP[!grepl("K|M|B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$CROPDMGEXP[grep("K", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$CROPDMGEXP[grep("M", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$CROPDMGEXP[grep("B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$CROPDMGEXP <- as.numeric(as.character(mydata$CROPDMGEXP))
mydata$crop.damage <- mydata$CROPDMG * 10^mydata$CROPDMGEXP
sort(table(mydata$property.damage), decreasing = TRUE)[1:10]
sort(table(mydata$crop.damage), decreasing = TRUE)[1:10]
summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
group_by(mydata, EVENT)
mydata
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
dim(storm.data)
if(!exists("storm.data")) {
storm.data<-read.csv(bzfile("repdata_data_StormData.csv.bz2"),header = TRUE)
}
dim(storm.data)
str(storm.data)
vars <- c( "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
mydata <- storm.data[, vars]
tail(mydata)
c(sum(is.na(mydata$FATALITIES)),sum(is.na(mydata$INJURIES)), sum(is.na(mydata$PROPDMG)), sum(is.na(mydata$CROPDMG)), sum(is.na(mydata$PROPDMGEXP)), sum(is.na(mydata$CROPDMGEXP)))
sort(table(mydata$EVTYPE), decreasing = TRUE)[1:10]
# create a new variable EVENT to transform variable EVTYPE in groups
mydata$EVENT <- "OTHER"
# group by keyword in EVTYPE
mydata$EVENT[grep("HAIL", mydata$EVTYPE, ignore.case = TRUE)] <- "HAIL"
mydata$EVENT[grep("HEAT", mydata$EVTYPE, ignore.case = TRUE)] <- "HEAT"
mydata$EVENT[grep("FLOOD", mydata$EVTYPE, ignore.case = TRUE)] <- "FLOOD"
mydata$EVENT[grep("WIND", mydata$EVTYPE, ignore.case = TRUE)] <- "WIND"
mydata$EVENT[grep("STORM", mydata$EVTYPE, ignore.case = TRUE)] <- "STORM"
mydata$EVENT[grep("SNOW", mydata$EVTYPE, ignore.case = TRUE)] <- "SNOW"
mydata$EVENT[grep("TORNADO", mydata$EVTYPE, ignore.case = TRUE)] <- "TORNADO"
mydata$EVENT[grep("WINTER", mydata$EVTYPE, ignore.case = TRUE)] <- "WINTER"
mydata$EVENT[grep("RAIN", mydata$EVTYPE, ignore.case = TRUE)] <- "RAIN"
# listing the transformed event types
sort(table(mydata$EVENT), decreasing = TRUE)
sort(table(mydata$PROPDMGEXP), decreasing = TRUE)[1:10]
sort(table(mydata$CROPDMGEXP), decreasing = TRUE)[1:10]
mydata$PROPDMGEXP <- as.character(mydata$PROPDMGEXP)
mydata$PROPDMGEXP[is.na(mydata$PROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$PROPDMGEXP[!grepl("K|M|B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$PROPDMGEXP[grep("K", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$PROPDMGEXP[grep("M", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$PROPDMGEXP[grep("B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$PROPDMGEXP <- as.numeric(as.character(mydata$PROPDMGEXP))
mydata$property.damage <- mydata$PROPDMG * 10^mydata$PROPDMGEXP
mydata$CROPDMGEXP <- as.character(mydata$CROPDMGEXP)
mydata$CROPDMGEXP[is.na(mydata$CROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$CROPDMGEXP[!grepl("K|M|B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$CROPDMGEXP[grep("K", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$CROPDMGEXP[grep("M", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$CROPDMGEXP[grep("B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$CROPDMGEXP <- as.numeric(as.character(mydata$CROPDMGEXP))
mydata$crop.damage <- mydata$CROPDMG * 10^mydata$CROPDMGEXP
sort(table(mydata$property.damage), decreasing = TRUE)[1:10]
sort(table(mydata$crop.damage), decreasing = TRUE)[1:10]
sort(table(mydata$property.damage), decreasing = TRUE)[1:10]
summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries$type <- "fatalities and injuries"
# aggregate FATALITIES by type of EVENT
agg.fatalities <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalities$type <- "fatalities"
# aggregate INJURIES by type of EVENT
agg.injuries <- summarize(group_by(mydata, EVENT), Total = sum(INJURIES, na.rm = TRUE))
agg.injuries$type <- "injuries"
# combine all
agg.health <- rbind(agg.fatalities, agg.injuries)
health.by.event <- join(agg.fatalities, agg.injuries, by="EVENT", type="inner")
health.by.event
# aggregate PropDamage and CropDamage by type of EVENT
agg.propdmg.and.cropdmg <- summarize(group_by(mydata, EVENT), Total = sum(property.damage + crop.damage, na.rm = TRUE))
agg.propdmg.and.cropdmg$type <- "property and crop damage"
# aggregate PropDamage by type of EVENT
agg.prop <- summarize(group_by(mydata, EVENT), Total = sum(property.damage, na.rm = TRUE))
agg.prop$type <- "property"
# aggregate INJURIES by type of EVENT
agg.crop <- summarize(group_by(mydata, EVENT), Total = sum(crop.damage + crop.damage, na.rm = TRUE))
agg.crop$type <- "crop"
# combine all
agg.economic <- rbind(agg.prop, agg.crop)
economic.by.event <- join (agg.prop, agg.crop, by="EVENT", type="inner")
economic.by.event
# transform EVENT to factor variable for health variables
agg.health$EVENT <- as.factor(agg.health$EVENT)
# plot FATALITIES and INJURIES by EVENT
health.plot <- ggplot(agg.health, aes(x = EVENT, y = Total, fill = type)) + geom_bar(stat = "identity") +
coord_flip() +
xlab("Event Type") +
ylab("Total number of health impact") +
ggtitle("Weather event types impact on public health") +
theme(plot.title = element_text(hjust = 0.5))
print(health.plot)
agg.health,
agg.health
# # transform EVENT to factor variable for economic variables
agg.economic$EVENT <- as.factor(agg.economic$EVENT)
# plot PROPERTY damage and CROP damage by EVENT
economic.plot <- ggplot(agg.economic, aes(x = EVENT, y = Total, fill = type)) + geom_bar(stat = "identity") +
coord_flip() +
xlab("Event Type") +
ylab("Total damage in dollars") +
ggtitle("Weather event types impact on property and crop damage") +
theme(plot.title = element_text(hjust = 0.5))
print(economic.plot)
swirl()
swirl
library('swirl')
swirl()
pbeta(0.75, 2, 1)
qbeta(0.975, 2, 1)
qbeta(0.5, 1, 1)
rm(list=ls())
library(data.table)
library(base)
library(utils)
library(dplyr)
library(ggplot2)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
wd <- getwd()
download.file(url, file.path(wd, "dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
activity <- read.table(file = "activity.csv", dec = ".", stringsAsFactors = FALSE, colClasses = c("numeric", "character", "numeric"), header = TRUE, sep = ",", na.strings = "?")
activity$date <- as.Date(activity$date)
total_steps <- summarize(group_by(activity, date), steps = sum(steps, na.rm = TRUE))
hist(total_steps$steps, col = "red", main = "Total Steps Per Day", xlab = "Number of Steps")
averaged_interval <- summarize(group_by(activity, interval), steps = mean(steps, na.rm = TRUE))
plot(averaged_interval$interval, averaged_interval$steps, type="l", col="red", main="Average Daily Activity Pattern", xlab= "Interval", ylab="Number of Steps")
new_activity <- group_by(activity, interval) %>%  mutate(steps= ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps))
new_total_steps <- summarize(group_by(new_activity, date), steps = sum(steps, na.rm = TRUE))
hist(new_total_steps$steps, col = "red", main = "Total Steps Per Day After Imputation", xlab = "Number of Steps")
activity["weekday"] <- weekdays(activity$date)
#create a vector of weekdays
week_days <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#Use `%in%` and `weekdays` to create a logical vector
#convert to `factor` and specify the `levels/labels`
activity$day_type <- factor((weekdays(activity$date) %in% week_days), levels=c(FALSE, TRUE), labels=c('Weekend', 'Weekday'))
averaged_day_type <- summarize(group_by(activity, day_type, interval), steps = mean(steps, na.rm = TRUE))
ggplot(averaged_day_type, aes(interval, steps)) +
geom_line(color = "red",size = 1) + labs(title="Average Daily Activity Pattern", x= "Interval", y="Number of Steps") + theme(aspect.ratio = 1) + facet_wrap(~ day_type)
setwd("Desktop/DataScienceWithR/ProgrammingAssignment10/")
#install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(reshape)
library(ggplot2)
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
library(matahari)
dance_start(value = FALSE, contents = FALSE)
head(college)
tail(college)
str(college)
college <- na.omit(college)
college$rank <- as.factor(college$rank)
college$major <- as.factor(college$major)
college$major_code <- as.factor(college$major_code)
college$major_category <- as.factor(college$major_category)
## Subset numeric column
#college.numeric <- college[,sapply(college, is.numeric)]
boxplot(median/1000 ~ major_category, data = college, main = "Income vs. Major", ylab="Income (thousands of dollar)", las = 2)
unique(college$major_category)
major_category_ref <- relevel(college$major_category, "Arts")
fit <- lm(median ~ major_category_ref, data = college)
summary(fit)$coef
A <- matrix(, nrow = 16, ncol = 16)
for (i in 1:16){
major_category_ref <- relevel(college$major_category, as.character(unique(college$major_category)[i]))
fit <- lm(median ~ major_category_ref, data = college)
tmp <- summary(fit)$coef[,4]
# swap the first element to the corresponding position in the diagonal matrix
tmp1 <- tmp[1:i]
tmp1 <- c(0,tmp1)
tmp1 <- c(tmp1[-2],tmp1[2])
tmp1 <- tmp1[-1]
# save to A
A[,i] <- c(tmp1,tmp[-(1:i)])
}
B <- data.frame(A)
names(B) <- unique(college$major_category)
B$major <- unique(college$major_category)
Bmelt <- melt(B)
g = ggplot(data=Bmelt, aes(x=variable, y=major, fill=value))
g = g + geom_tile()
g = g + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("Major") + xlab("Major")
g = g + ggtitle("Probability of difference in Income between Majors")
g = g + coord_fixed()
g
g = ggplot(data=Bmelt, aes(x=variable, y=major, fill=value < 0.025))
g = g + geom_tile()
g = g + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("Major") + xlab("Major")
g = g + ggtitle("Difference in Income between Majors")
g = g + coord_fixed()
g
major_category_ref <- relevel(college$major_category, "Business")
fit <- lm(median ~ major_category_ref, data = college)
summary(fit)$coef
business_diff <- summary(fit)$coef[-1,]
business_diff[order(business_diff[,4])[1:5],]
dance_save("college_major_analysis.rds")
library("MASS")
data("shuttle")
shuttle
shuttle$use
shuttle$use=="auto"
shuttle$use=="auto"*1
(shuttle$use=="auto") *1
shuttle$use1 <- (shuttle$use=="auto") *1
shuttle
glm(shuttle$use1~shuttle$wind,family = "binomial")
fit <- glm(shuttle$use1~shuttle$wind,family = "binomial")
fit
summary(fit)
fit
log(0.03181)
exp(0.03181)
shuttle
fit2 <- glm(shuttle$use1~shuttle$wind + shuttle$margin,family = "binomial")
setwd("~/Desktop/DataScienceWithR/")
dir.create("ProgrammingAssignment11")
setwd("ProgrammingAssignment11/")
file.create("motor_analysis.rmd")
file.create("README.md")
open("README.md")
data(mtcars)
names(mtcars)
data(mtcars)
names(mtcars)
summary(cars)
cor(mtcars$mpg,mtcars[,-1])
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <-c("Automatic", "Manual")
t.test(mtcars$mpg~mtcars$am,conf.level=0.95)
stepmodel = step(lm(data = mtcars, mpg ~ .),trace=0,steps=10000)
summary(stepmodel)
model <- lm(mpg~ factor(am):wt + factor(am):qsec,data=mtcars)
summary(model)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, outpch = 19, ylab="mpg:miles per
gallon",xlab="transmission type",main="mpg vs transmission type", col="blue")
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, outpch = 19, ylab="mpg:miles per
gallon",xlab="transmission type",main="mpg vs transmission type", col="blue")
par(mfrow=c(2,2))
plot(model)
par(mfrow=c(2,2))
plot(model)
plot(model)
plot(model)
pairs(mpg ~ ., data = mtcars)
par(mfrow=c(2,1))
hist(mtcars$mpg, breaks=10, xlab="MPG", main="MPG histogram")
plot(density(mtcars$mpg), main="kernel density", xlab="MPG")
tinytex::install_tinytex()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Caret")
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
par(mixtures)
names <- colnames(concrete)
names <- names[-length(names)]
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
hist(mixtures$CompressiveStrength)
hist(mixtures$SuperPlasticizer)
mixtures$SuperPlasticizer
names(mixtures)
mixtures$Superplasticizer
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
hist(mixtures$Superplasticizer)
log(0)
hist(log(mixtures$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
hist(exp(mixtures$Superplasticizer))
getwd()
setwd("..")
dir()
dir.create("ProgrammingAssignment12")
dir()
file.create("README.md")
setwd("ProgrammingAssignment12/")
file.create("README.md")
file.create("groupware_analysis.rmd")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
library(caret)
getwd()
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
dir.create("data")
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
dir.create("data")
if(!file.exists(dataFiles.zip)) {
download.file(train_url, file.path(wd, "data/pml-training.csv"))
}
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
dir.create("data")
if (!file.exists(data/pml-training.csv)) {
download.file(train_url, file.path(wd, "data/pml-training.csv"))
}
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
dir.create("data")
if (!file.exists(data/pml_training.csv)) {
download.file(train_url, file.path(wd, "data/pml-training.csv"))
}
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
dir.create("data")
if (!file.exists(data/pml_training.csv)) {
download.file(train_url, file.path(wd, "data/pml_training.csv"))
}
file.exists(data/pml_training.csv)
file.exists(pml_training.csv)
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
dir.create("data")
download.file(train_url, file.path(wd, "data/pml_training.csv"))
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
dir.create("data")
download.file(train_url, file.path(wd, "pml_training.csv"))
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(train_url, file.path(wd, "pml_training.csv"))
download.file(test_url, file.path(wd, "pml_testing.csv"))
train_data <- read.csv('data/pml_training.csv')
train_data <- read.csv('pml_training.csv')
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
dir.create("data")
train_data <- read.csv('data/pml_training.csv')
