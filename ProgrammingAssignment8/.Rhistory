install.packages("shiny")
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
library(devtools)
devtools::install_github("statswithr/statsr")
install_github("StatsWithR/statsr")
install.packages("remotes")
remotes::install_github("StatsWithR/statsr")
library(ggplot2)
library(dplyr)
library(shiny)
install_github("StatsWithR/statsr")
install.packages("statsr")
library(dplyr)
library(ggplot2)
library(statsr)
library(dplyr)
library(ggplot2)
library(statsr)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
data(arbuthnot)
force(arbuthnot)
arbuthnot
View(arbuthnot)
dim(arbuthnot)
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
View(arbuthnot)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
arbuthnot <- arbuthnot %>%
mutate(proportion = boys / total)
ggplot(data = arbuthnot, aes(x = year, y = proportion)) +
geom_line() +
geom_point()
data(present)
force(present)
View(arbuthnot)
View(arbuthnot)
View(present)
range(present$year)
present <- present %>%
mutate(total = present$boys + present$girls)
View(arbuthnot)
View(present)
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=present$years, y=present$prop_boys))+geom()
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=present$years, y=present$prop_boys))+geom_line()+geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys))+geom_line()+geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys))+geom_line()+geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys))+geom_line()+geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(prop_boys= present$boys / present$total) %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes (x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(prop_boys= present$boys / present$total) %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes(x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(prop_boys= present$boys / present$total) %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes(x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes(x=years, y=total)) +
geom_line() +
geom_point
present <- present %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes(x=years, y=total)) +
geom_line() +
geom_point
arbuthnot <- arbuthnot %>%
mutate(proportion = boys / total)
ggplot(data = arbuthnot, aes(x = year, y = proportion)) +
geom_line() +
geom_point()
present <- present %>%
mutate(prop_boys= boys / total) %>%
mutate(total = boys + girls)
ggplot(data=present, aes(x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(total = boys + girls)
ggplot(data = present, aes(x = year, y = total)) +
geom_line() +
geom_point()
present <- present %>%
mutata(prop_boys = boys / total) %>%
mutate(total = boys + girls)
present <- present %>%
mutate(prop_boys = boys / total) %>%
mutate(total = boys + girls)
ggplot(data = present, aes(x = year, y = prop_boys)) +
geom_line() +
geom_point()
present <- present %>%
mutate(more_boys = boys > girls)
View(present)
present <- present %>%
mutate(prop_boy_girl = boys / girl)
present <- present %>%
mutate(prop_boy_girl = boys / girls)
ggplot(data = present, aes(x = year, y = prop_boy_girl)) +
geom_line() +
geom_point()
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
present <- present %>%
mutate(total = boys + girls) %>%
arrange(desc(total))
View(present)
View(present)
View(present)
data(nycflights)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
force(nycflights)
names(nycflights)
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
View(present)
View(nycflights)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
ggplot(data = sfo_feb_flights, aes(x = arrival)) +
geom_histogram()
ggplot(data = sfo_feb_flights, aes(x = arr)) +
geom_histogram()
View(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram()
View(rdu_flights)
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median = median(arr_delay), IQR = IQR(arr_delay), n = n())
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>%
summarise(median = median(dep_delay)) %>%
arrange(desc(median))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed = distance/air_time)
nycflights %>%
arrange(desc(avg_speed)) %>%
select(avg_speed, tailnum)
ggplot(data = nycflights,aes(x=distance, y=avg_speed)) +
geom_scatter()
ggplot(data = nycflights,aes(x=distance, y=avg_speed)) +
geom_()
ggplot(data = nycflights,aes(x=distance, y=avg_speed)) +
geom_point()
View(nycflights)
View(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = n(arr_type)/ n()) %>%
arrange(desc(percent_arr))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
View(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = count("on_time")/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = count(on_time)/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = count(arr_type(on_time)/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
summarise(percent_arr = count(arr_type(on_time)/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = count(arr_type("on_time")/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
count(arr_type)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
count(nycflights$arr_type)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = count(arr_type == "on time") / n(arr_type)) %>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = percent_rank(arr_type == "on time"))%>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate=percent_rank(arr_type == "on time"))%>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate=sum(arr_type == "on time")/n())%>%
arrange(desc(ot_arr_rate))
View(sfo_feb_flights)
rm(list=ls())
library(data.table)
library(base)
library(utils)
library(dplyr)
library(ggplot2)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
wd <- getwd()
if (!file.exists(file.path(wd, "stormdata.zip"))) {
download.file(url, file.path(wd, "stormdata.zip"))
}
read.csv("stormdata.zip")
ls
ls()
dir()
setwd("Desktop/DataScienceWithR/ProgrammingAssignment8/")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
wd <- getwd()
if (!file.exists(file.path(wd, "stormdata.zip"))) {
download.file(url, file.path(wd, "stormdata.zip"))}
read.csv(bzfile("stormdata.zip"),header = TRUE)
dim(storm.data)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
wd <- getwd()
if (!file.exists(file.path(wd, "stormdata.zip"))) {
download.file(url, file.path(wd, "stormdata.zip"))
}
storm.data <-read.csv(bzfile("stormdata.zip"),header = TRUE)
dim(storm.data)
str(storm.data)
vars <- c( "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
mydata <- storm.data[, vars]
mydata
tail(mydata)
c(sum(is.na(mydata$FATALITIES)),sum(is.na(mydata$INJURIES)), sum(is.na(mydata$PROPDMG)), sum(is.na(mydata$CROPDMG)), sum(is.na(mydata$PROPDMGEXP)), sum(is.na(mydata$CROPDMGEXP)))
sort(table(mydata$EVTYPE), decreasing = TRUE)[1:10]
# create a new variable EVENT to transform variable EVTYPE in groups
mydata$EVENT <- "OTHER"
mydata$EVENT
grep("HAIL", mydata$EVTYPE, ignore.case = TRUE)
# create a new variable EVENT to transform variable EVTYPE in groups
mydata$EVENT <- "OTHER"
# group by keyword in EVTYPE
mydata$EVENT[grep("HAIL", mydata$EVTYPE, ignore.case = TRUE)] <- "HAIL"
mydata$EVENT[grep("HEAT", mydata$EVTYPE, ignore.case = TRUE)] <- "HEAT"
mydata$EVENT[grep("FLOOD", mydata$EVTYPE, ignore.case = TRUE)] <- "FLOOD"
mydata$EVENT[grep("WIND", mydata$EVTYPE, ignore.case = TRUE)] <- "WIND"
mydata$EVENT[grep("STORM", mydata$EVTYPE, ignore.case = TRUE)] <- "STORM"
mydata$EVENT[grep("SNOW", mydata$EVTYPE, ignore.case = TRUE)] <- "SNOW"
mydata$EVENT[grep("TORNADO", mydata$EVTYPE, ignore.case = TRUE)] <- "TORNADO"
mydata$EVENT[grep("WINTER", mydata$EVTYPE, ignore.case = TRUE)] <- "WINTER"
mydata$EVENT[grep("RAIN", mydata$EVTYPE, ignore.case = TRUE)] <- "RAIN"
# listing the transformed event types
sort(table(mydata$EVENT), decreasing = TRUE)
sort(table(mydata$PROPDMGEXP), decreasing = TRUE)[1:10]
sort(table(mydata$CROPDMGEXP), decreasing = TRUE)[1:10]
mydata$PROPDMGEXP <- as.character(mydata$PROPDMGEXP)
mydata$PROPDMGEXP[is.na(mydata$PROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$PROPDMGEXP[!grepl("K|M|B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$PROPDMGEXP[grep("K", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$PROPDMGEXP[grep("M", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$PROPDMGEXP[grep("B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$PROPDMGEXP <- as.numeric(as.character(mydata$PROPDMGEXP))
mydata$property.damage <- mydata$PROPDMG * 10^mydata$PROPDMGEXP
mydata$CROPDMGEXP <- as.character(mydata$CROPDMGEXP)
mydata$CROPDMGEXP[is.na(mydata$CROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$CROPDMGEXP[!grepl("K|M|B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$CROPDMGEXP[grep("K", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$CROPDMGEXP[grep("M", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$CROPDMGEXP[grep("B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$CROPDMGEXP <- as.numeric(as.character(mydata$CROPDMGEXP))
mydata$crop.damage <- mydata$CROPDMG * 10^mydata$CROPDMGEXP
sort(table(mydata$property.damage), decreasing = TRUE)[1:10]
sort(table(mydata$crop.damage), decreasing = TRUE)[1:10]
ddply(mydata, .(EVENT), summarize, Total = sum(FATALITIES + INJURIES,  na.rm = TRUE))
summarize(group_by(mydata, Event), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
mydata.column
colnames(mydata)
summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalites.and.injuries <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalites.and.injuries$type <- "fatalities and injuries"
agg.fatalites.and.injuries$type
agg.fatalites.and.injuries <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalites.and.injuries$type <- "fatalities and injuries"
# aggregate FATALITIES by type of EVENT
agg.fatalites <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalites$type <- "fatalities"
# aggregate INJURIES by type of EVENT
agg.injuries <- summarize(group_by(mydata, EVENT), Total = sum(INJURIES, na.rm = TRUE))
agg.injuries$type <- "injuries"
# combine all
agg.health <- rbind(agg.fatalities, agg.injuries)
agg.fatalities.and.injuries <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries$type <- "fatalities and injuries"
# aggregate FATALITIES by type of EVENT
agg.fatalities <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalities$type <- "fatalities"
# aggregate INJURIES by type of EVENT
agg.injuries <- summarize(group_by(mydata, EVENT), Total = sum(INJURIES, na.rm = TRUE))
agg.injuries$type <- "injuries"
# combine all
agg.health <- rbind(agg.fatalities, agg.injuries)
agg.health
agg.fatalities.and.injuries <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries$type <- "fatalities and injuries"
# aggregate FATALITIES by type of EVENT
agg.fatalities <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalities$type <- "fatalities"
# aggregate INJURIES by type of EVENT
agg.injuries <- summarize(group_by(mydata, EVENT), Total = sum(INJURIES, na.rm = TRUE))
agg.injuries$type <- "injuries"
# combine all
agg.health <- rbind(agg.fatalities, agg.injuries)
health.by.event <- join (agg.fatalities, agg.injuries, by="EVENT", type="inner")
agg.fatalities.and.injuries <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries$type <- "fatalities and injuries"
# aggregate FATALITIES by type of EVENT
agg.fatalities <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalities$type <- "fatalities"
# aggregate INJURIES by type of EVENT
agg.injuries <- summarize(group_by(mydata, EVENT), Total = sum(INJURIES, na.rm = TRUE))
agg.injuries$type <- "injuries"
# combine all
agg.health <- rbind(agg.fatalities, agg.injuries)
health.by.event <- join(agg.fatalities, agg.injuries, by="EVENT", type="inner")
library(dplyr)
library(plyr)
agg.fatalities.and.injuries <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries$type <- "fatalities and injuries"
# aggregate FATALITIES by type of EVENT
agg.fatalities <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalities$type <- "fatalities"
# aggregate INJURIES by type of EVENT
agg.injuries <- summarize(group_by(mydata, EVENT), Total = sum(INJURIES, na.rm = TRUE))
agg.injuries$type <- "injuries"
# combine all
agg.health <- rbind(agg.fatalities, agg.injuries)
health.by.event <- join(agg.fatalities, agg.injuries, by="EVENT", type="inner")
agg.fatalities
agg.fatalities <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalities$type <- "fatalities"
# aggregate INJURIES by type of EVENT
agg.injuries <- summarize(group_by(mydata, EVENT), Total = sum(INJURIES, na.rm = TRUE))
agg.injuries$type <- "injuries"
# combine all
agg.health <- rbind(agg.fatalities, agg.injuries)
health.by.event <- join(agg.fatalities, agg.injuries, by="EVENT", type="inner")
health.by.event
agg.fatalities
agg.fatalities <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalities$type <- "fatalities"
agg.fatalities
agg.fatalities.and.injuries
summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries$type <- "fatalities and injuries"
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
wd <- getwd()
if (!exists(file.path(wd, "stormdata.zip"))) {
download.file(url, file.path(wd, "stormdata.zip"))
}
storm.data <-read.csv(bzfile("stormdata.zip"),header = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
wd <- getwd()
if (!exists(file.path(wd, "stormdata.zip"))) {
download.file(url, file.path(wd, "stormdata.zip"))
}
storm.data <-read.csv(bzfile("stormdata.zip"),header = TRUE)
dim(storm.data)
str(storm.data)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
wd <- getwd()
if(!exists("storm.data")) {
storm.data<-read.csv(bzfile("stormdata.zip"),header = TRUE)
}
if(!exists("storm.data")) {
storm.data<-read.csv(bzfile("stormdata.zip"),header = TRUE)
}
if(!exists("storm.data")) {
storm.data<-read.csv(bzfile("repdata_data_StormData.csv.bz2"),header = TRUE)
}
