ggplot(data=present, aes (x=present$years, y=present$prop_boys))+geom_line()+geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys))+geom_line()+geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys))+geom_line()+geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys))+geom_line()+geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(total = present$boys + present$girls) %>% mutate(prop_boys= present$boys + present$total)
ggplot(data=present, aes (x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(prop_boys= present$boys / present$total) %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes (x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(prop_boys= present$boys / present$total) %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes(x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(prop_boys= present$boys / present$total) %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes(x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes(x=years, y=total)) +
geom_line() +
geom_point
present <- present %>%
mutate(total = present$boys + present$girls)
ggplot(data=present, aes(x=years, y=total)) +
geom_line() +
geom_point
arbuthnot <- arbuthnot %>%
mutate(proportion = boys / total)
ggplot(data = arbuthnot, aes(x = year, y = proportion)) +
geom_line() +
geom_point()
present <- present %>%
mutate(prop_boys= boys / total) %>%
mutate(total = boys + girls)
ggplot(data=present, aes(x=years, y=prop_boys)) +
geom_line() +
geom_point
present <- present %>%
mutate(total = boys + girls)
ggplot(data = present, aes(x = year, y = total)) +
geom_line() +
geom_point()
present <- present %>%
mutata(prop_boys = boys / total) %>%
mutate(total = boys + girls)
present <- present %>%
mutate(prop_boys = boys / total) %>%
mutate(total = boys + girls)
ggplot(data = present, aes(x = year, y = prop_boys)) +
geom_line() +
geom_point()
present <- present %>%
mutate(more_boys = boys > girls)
View(present)
present <- present %>%
mutate(prop_boy_girl = boys / girl)
present <- present %>%
mutate(prop_boy_girl = boys / girls)
ggplot(data = present, aes(x = year, y = prop_boy_girl)) +
geom_line() +
geom_point()
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
present <- present %>%
mutate(total = boys + girls) %>%
arrange(desc(total))
View(present)
View(present)
View(present)
data(nycflights)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
force(nycflights)
names(nycflights)
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
View(present)
View(nycflights)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
ggplot(data = sfo_feb_flights, aes(x = arrival)) +
geom_histogram()
ggplot(data = sfo_feb_flights, aes(x = arr)) +
geom_histogram()
View(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram()
View(rdu_flights)
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median = median(arr_delay), IQR = IQR(arr_delay), n = n())
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>%
summarise(median = median(dep_delay)) %>%
arrange(desc(median))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed = distance/air_time)
nycflights %>%
arrange(desc(avg_speed)) %>%
select(avg_speed, tailnum)
ggplot(data = nycflights,aes(x=distance, y=avg_speed)) +
geom_scatter()
ggplot(data = nycflights,aes(x=distance, y=avg_speed)) +
geom_()
ggplot(data = nycflights,aes(x=distance, y=avg_speed)) +
geom_point()
View(nycflights)
View(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = n(arr_type)/ n()) %>%
arrange(desc(percent_arr))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
View(nycflights)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = count("on_time")/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = count(on_time)/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = count(arr_type(on_time)/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
summarise(percent_arr = count(arr_type(on_time)/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(percent_arr = count(arr_type("on_time")/n())
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
count(arr_type)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
count(nycflights$arr_type)
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = count(arr_type == "on time") / n(arr_type)) %>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = percent_rank(arr_type == "on time"))%>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_time <= air_time+dep_time, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate=percent_rank(arr_type == "on time"))%>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate=sum(arr_type == "on time")/n())%>%
arrange(desc(ot_arr_rate))
View(sfo_feb_flights)
getwd()
setwd("/Users/toluwalasheomotunde/Desktop/DataScienceWithR/ProgrammingAssignment5/")
file.create("plot1.R")
rm(list=ls())
library(data.table)
library(base)
library(utils)
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
wd <- getwd()
if(!file.exists(dataFiles.zip)) {
download.file(url, file.path(wd, "dataFiles.zip"))
}
unzip(zipfile = "dataFiles.zip")
rm(list=ls())
library(data.table)
library(base)
library(utils)
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
wd <- getwd()
if(!file.exists(dataFiles.zip)) {
download.file(url, file.path(wd, "dataFiles.zip"))
}
rm(list=ls())
library(data.table)
library(base)
library(utils)
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
wd <- getwd()
if(!file.exists(dataFiles.zip)) {
download.file(url, destfile=file.path(wd, "dataFiles.zip"),method="curl")
}
unzip(zipfile = "dataFiles.zip")
download.file(url, "dataFiles.zip")
unzip(zipfile = "dataFiles.zip")
download.file(url, "dataFiles.zip")
unzip(zipfile = "dataFiles.zip")
power_consumption <- fread(file.path(wd, "household_power_consumption.txt"))
str(power_consumption)
runif(100)
?runif
power_consumption
str(power_consumption)
power_consumption$Date <- as.Date(power_consumption$Date,
format = "%m/%d/%y")
str(power_consumption)
power_consumption
rm(list=ls())
library(data.table)
library(base)
library(utils)
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
wd <- getwd()
if(!file.exists(dataFiles.zip)) {
download.file(url, file.path(wd, "dataFiles.zip"))
}
unzip(zipfile = "dataFiles.zip")
power_consumption <- fread(file.path(wd, "household_power_consumption.txt"))
power_consumption$Date <- as.Date(power_consumption$Date)
power_consumption
power_consumption <- fread(file.path(wd, "household_power_consumption.txt"))
power_consumption
power_consumption$Date <- as.Date(power_consumption$Date,
format = "%m/%d/%y")
power_consumption
power_consumption <- fread(file.path(wd, "household_power_consumption.txt"))
power_consumption
power_consumption$Date <- as.Date(power_consumption$Date,
format = "%d/%m/%y")
power_consumption
power_consumption[with(power_consumption$Date >= "2007-02-01"),]
power_consumption[with(power_consumption$Date >= "2007-02-01")]
power_consumption[power_consumption$Date >= "2007-02-01")]
power_consumption[power_consumption$Date >= "2007-02-01"]
power_consumption[power_consumption$Date >= "2007-02-01" & power_consumption$Date <= "2007-02-02"]
power_consumption$Date <= "2007-02-02"
power_consumption[power_consumption$Date >= "2007-02-01" && power_consumption$Date <= "2007-02-02"]
power_consumption[power_consumption$Date <= "2007-02-02"]
power_consumption
power_consumption <- power_consumption[power_consumption$Date >= "2007-02-01" & power_consumption$Date <= "2007-02-02"]
power_consumption
unzip(zipfile = "dataFiles.zip")
power_consumption <- fread(file.path(wd, "household_power_consumption.txt"))
power_consumption$Date <- as.Date(power_consumption$Date,
format = "%d/%m/%y")
power_consumption <- power_consumption[power_consumption$Date >= "2007-02-01"]
power_consumption
tail(power_consumption)
a <- power_consumption.copy()
a <- copy(power_consumption)
a
power_consumption <- fread(file.path(wd, "household_power_consumption.txt"))
power_consumption_cp <- copy(power_consumption)
power_consumption_cp
power_consumption_cp$Date <- as.Date(power_consumption_cp$Date,
format = "%d/%m/%y")
power_consumption_cp
power_consumption_cp <- copy(power_consumption)
power_consumption_cp
as.Date(power_consumption_cp$Date, format = "%y/%m/%d")
as.Date(power_consumption_cp$Date, format = "%m/%y/%d")
as.Date(power_consumption_cp$Date, format = "%m/%d/%m")
as.Date(power_consumption_cp$Date, format = "%d/%m/%y")
as.Date(power_consumption_cp$Date, format = "%y/%m/%d")
install.packages("flipTime")
library(flipTime)
as.Date(power_consumption_cp$Date)
as.Date(power_consumption_cp$Date)
power_consumption_cp$Date
as.Date(power_consumption_cp$Date, format = "%d/%m/%y")
power_consumption_cp$Date
as.Date(power_consumption_cp$Date, format = "%d/%m/%y")
power_consumption <- read.table(file = "household_power_consumption.txt", dec = ".", stringsAsFactors = FALSE,
colClasses = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"), header = TRUE, sep = ";", na.strings = "?")
power_consumption
data <- filter(power_consumption, Date %in% c("1/2/2007", "2/2/2007"))
rm(power_consumption)
# subset data to and remove original data table to free space
data <- filter(power_consumption, power_consumption$Date %in% c("1/2/2007", "2/2/2007"))
power_consumption <- read.table(file = "household_power_consumption.txt", dec = ".", stringsAsFactors = FALSE,
colClasses = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"), header = TRUE, sep = ";", na.strings = "?")
# subset data to and remove original data table to free space
data <- filter(power_consumption, power_consumption$Date %in% c("1/2/2007", "2/2/2007"))
rm(power_consumption)
data
library(dplyr)
# subset data to and remove original data table to free space
data <- filter(power_consumption, Date %in% c("1/2/2007", "2/2/2007"))
power_consumption <- read.table(file = "household_power_consumption.txt", dec = ".", stringsAsFactors = FALSE,
colClasses = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"), header = TRUE, sep = ";", na.strings = "?")
# subset data to and remove original data table to free space
data <- filter(power_consumption, Date %in% c("1/2/2007", "2/2/2007"))
rm(power_consumption)
data
# new column date_time for x axis
data$Date <- as.Date(data$Date, "%d/%m/%Y")
data$Date
data <- mutate(data, date_time = as.POSIXct(paste(data$Date, data$Time, sep=" "), template = "%d/%m/%Y %H:%M:%S", tz = Sys.timezone()))
names(data)
#plot histogram
hist(data$Global_active_power, col = "red")
title("Global Active Power")
hist(data$Global_active_power, col = "red")
title("Global Active Power")
hist(data$Global_active_power, col = "red")
title("Global Active Power")
#plot histogram
hist(data$Global_active_power, col = "red", title = "Global Active Power")
title(main="Global Active Power", xlab=expression(Global*Active*Power*(kilowatts)))
title(main="Global Active Power", xlab=expression(Global*Active*Power*(kilowatts)))
title(main="Global Active Power")
hist(data$Global_active_power, col = "red")
title(main="Global Active Power")
hist(data$Global_active_power, col = "red")
png("plot1.png", width=580, height=580)
hist(data$Global_active_power, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", ylim = c(0,1200),
xlim = c(0,6), breaks = 12)
dev.off()
file.create("plot2.R")
plot(data$date_time, data$Global_active_power)
plot(data$date_time, data$Global_active_power, pch=20)
?plot
plot(data$date_time, data$Global_active_power, pch=20, lty=1)
plot(data$date_time, data$Global_active_power, type="l", lty=1)
plot(data$date_time, data$Global_active_power, type="s", lty=1)
plot(data$date_time, data$Global_active_power, type="l", lty=1)
plot(data$date_time, data$Global_active_power, type="l",
xlab= "", ylab="Global Active Power (kilowatts)",lty=1)
plot(data$date_time, data$Global_active_power, type="l", xlab= "", ylab="Global Active Power (kilowatts)")
png("plot2.png", width=580, height=580)
plot(data$date_time, data$Global_active_power, type="l", xlab= "", ylab="Global Active Power (kilowatts)")
dev.off()
file.create("plot3.R")
plot(date_time, Sub_metering_1, type = "l", col = "black")
with(data, {
plot(x=date_time, y=Sub_metering_1, type = "l", col = "black")
})
with(data, {
plot(x=date_time, y=Sub_metering_1, type = "l", col = "black", xlab="", ylab="Energy sub metering")
})
with(data, {
plot(x=date_time, y=Sub_metering_1, type = "l", col = "black", xlab="", ylab="Energy sub metering")
plot(x=date_time, y=Sub_metering_2, type = "l", col = "red")
plot(x=date_time, y=Sub_metering_3, type = "l", col = "blue")
})
lines(x=date_time, y=Sub_metering_3, type = "l", col = "blue")
with(data, {
plot(x=date_time, y=Sub_metering_1, type = "l", col = "black", xlab="", ylab="Energy sub metering")
lines(x=date_time, y=Sub_metering_2, type = "l", col = "red")
lines(x=date_time, y=Sub_metering_3, type = "l", col = "blue")
})
with(data, {
plot(x=date_time, y=Sub_metering_1, type = "l", col = "black", xlab="", ylab="Energy sub metering")
lines(x=date_time, y=Sub_metering_2, type = "l", col = "red")
lines(x=date_time, y=Sub_metering_3, type = "l", col = "blue")
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
})
png("plot3.png", width=580, height=580)
with(data, {
plot(x=date_time, y=Sub_metering_1, type = "l", col = "black", xlab="", ylab="Energy sub metering")
lines(x=date_time, y=Sub_metering_2, type = "l", col = "red")
lines(x=date_time, y=Sub_metering_3, type = "l", col = "blue")
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
})
dev.off()
file.create("plot4.R")
par(mfrow = c(1, 2))
with(data, {
plot(date_time, Global_active_power, type="l", xlab= "", ylab="Global Active Power (kilowatts)")
plot(date_time, Voltage, type="l", xlab= "", ylab="Voltage")
})
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(data, {
plot(date_time, Global_active_power, type="l", xlab= "", ylab="Global Active Power (kilowatts)")
plot(date_time, Voltage, type="l", xlab= "", ylab="Voltage")
})
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(data, {
plot(date_time, Global_active_power, type="l", xlab= "", ylab="Global Active Power (kilowatts)")
plot(date_time, Voltage, type="l", xlab= "", ylab="Voltage")
plot(x=date_time, y=Sub_metering_1, type = "l", col = "black", xlab="", ylab="Energy sub metering")
lines(x=date_time, y=Sub_metering_2, type = "l", col = "red")
lines(x=date_time, y=Sub_metering_3, type = "l", col = "blue")
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
})
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(data, {
plot(date_time, Global_active_power, type="l", xlab= "", ylab="Global Active Power")
plot(date_time, Voltage, type="l", xlab= "", ylab="Voltage")
plot(x=date_time, y=Sub_metering_1, type = "l", col = "black", xlab="", ylab="Energy sub metering")
lines(x=date_time, y=Sub_metering_2, type = "l", col = "red")
lines(x=date_time, y=Sub_metering_3, type = "l", col = "blue")
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
plot(date_time, Global_reactive_power, type="l", xlab= "", ylab="Global Reactive Power")
})
png("plot4.png", width=580, height=580)
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(data, {
plot(date_time, Global_active_power, type="l", xlab= "", ylab="Global Active Power")
plot(date_time, Voltage, type="l", xlab= "", ylab="Voltage")
plot(x=date_time, y=Sub_metering_1, type = "l", col = "black", xlab="", ylab="Energy sub metering")
lines(x=date_time, y=Sub_metering_2, type = "l", col = "red")
lines(x=date_time, y=Sub_metering_3, type = "l", col = "blue")
legend("topright", lty="solid", col=c("black", "red", "blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
plot(date_time, Global_reactive_power, type="l", xlab= "", ylab="Global Reactive Power")
})
dev.off()
dev.off()
unclass(as.date("1971-01-01"))
unclass(as.Date("1971-01-01"))
