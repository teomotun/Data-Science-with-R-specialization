sort(table(mydata$PROPDMGEXP), decreasing = TRUE)[1:10]
sort(table(mydata$CROPDMGEXP), decreasing = TRUE)[1:10]
mydata$PROPDMGEXP <- as.character(mydata$PROPDMGEXP)
mydata$PROPDMGEXP[is.na(mydata$PROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$PROPDMGEXP[!grepl("K|M|B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$PROPDMGEXP[grep("K", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$PROPDMGEXP[grep("M", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$PROPDMGEXP[grep("B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$PROPDMGEXP <- as.numeric(as.character(mydata$PROPDMGEXP))
mydata$property.damage <- mydata$PROPDMG * 10^mydata$PROPDMGEXP
mydata$CROPDMGEXP <- as.character(mydata$CROPDMGEXP)
mydata$CROPDMGEXP[is.na(mydata$CROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$CROPDMGEXP[!grepl("K|M|B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$CROPDMGEXP[grep("K", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$CROPDMGEXP[grep("M", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$CROPDMGEXP[grep("B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$CROPDMGEXP <- as.numeric(as.character(mydata$CROPDMGEXP))
mydata$crop.damage <- mydata$CROPDMG * 10^mydata$CROPDMGEXP
sort(table(mydata$property.damage), decreasing = TRUE)[1:10]
sort(table(mydata$crop.damage), decreasing = TRUE)[1:10]
summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
group_by(mydata, EVENT)
mydata
rm(list=ls())
library(plyr)
library(dplyr)
library(ggplot2)
dim(storm.data)
if(!exists("storm.data")) {
storm.data<-read.csv(bzfile("repdata_data_StormData.csv.bz2"),header = TRUE)
}
dim(storm.data)
str(storm.data)
vars <- c( "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
mydata <- storm.data[, vars]
tail(mydata)
c(sum(is.na(mydata$FATALITIES)),sum(is.na(mydata$INJURIES)), sum(is.na(mydata$PROPDMG)), sum(is.na(mydata$CROPDMG)), sum(is.na(mydata$PROPDMGEXP)), sum(is.na(mydata$CROPDMGEXP)))
sort(table(mydata$EVTYPE), decreasing = TRUE)[1:10]
# create a new variable EVENT to transform variable EVTYPE in groups
mydata$EVENT <- "OTHER"
# group by keyword in EVTYPE
mydata$EVENT[grep("HAIL", mydata$EVTYPE, ignore.case = TRUE)] <- "HAIL"
mydata$EVENT[grep("HEAT", mydata$EVTYPE, ignore.case = TRUE)] <- "HEAT"
mydata$EVENT[grep("FLOOD", mydata$EVTYPE, ignore.case = TRUE)] <- "FLOOD"
mydata$EVENT[grep("WIND", mydata$EVTYPE, ignore.case = TRUE)] <- "WIND"
mydata$EVENT[grep("STORM", mydata$EVTYPE, ignore.case = TRUE)] <- "STORM"
mydata$EVENT[grep("SNOW", mydata$EVTYPE, ignore.case = TRUE)] <- "SNOW"
mydata$EVENT[grep("TORNADO", mydata$EVTYPE, ignore.case = TRUE)] <- "TORNADO"
mydata$EVENT[grep("WINTER", mydata$EVTYPE, ignore.case = TRUE)] <- "WINTER"
mydata$EVENT[grep("RAIN", mydata$EVTYPE, ignore.case = TRUE)] <- "RAIN"
# listing the transformed event types
sort(table(mydata$EVENT), decreasing = TRUE)
sort(table(mydata$PROPDMGEXP), decreasing = TRUE)[1:10]
sort(table(mydata$CROPDMGEXP), decreasing = TRUE)[1:10]
mydata$PROPDMGEXP <- as.character(mydata$PROPDMGEXP)
mydata$PROPDMGEXP[is.na(mydata$PROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$PROPDMGEXP[!grepl("K|M|B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$PROPDMGEXP[grep("K", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$PROPDMGEXP[grep("M", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$PROPDMGEXP[grep("B", mydata$PROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$PROPDMGEXP <- as.numeric(as.character(mydata$PROPDMGEXP))
mydata$property.damage <- mydata$PROPDMG * 10^mydata$PROPDMGEXP
mydata$CROPDMGEXP <- as.character(mydata$CROPDMGEXP)
mydata$CROPDMGEXP[is.na(mydata$CROPDMGEXP)] <- 0 # NA's considered as dollars
mydata$CROPDMGEXP[!grepl("K|M|B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- 0 # everything exept K,M,B is dollar
mydata$CROPDMGEXP[grep("K", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "3"
mydata$CROPDMGEXP[grep("M", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "6"
mydata$CROPDMGEXP[grep("B", mydata$CROPDMGEXP, ignore.case = TRUE)] <- "9"
mydata$CROPDMGEXP <- as.numeric(as.character(mydata$CROPDMGEXP))
mydata$crop.damage <- mydata$CROPDMG * 10^mydata$CROPDMGEXP
sort(table(mydata$property.damage), decreasing = TRUE)[1:10]
sort(table(mydata$crop.damage), decreasing = TRUE)[1:10]
sort(table(mydata$property.damage), decreasing = TRUE)[1:10]
summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES + INJURIES, na.rm = TRUE))
agg.fatalities.and.injuries$type <- "fatalities and injuries"
# aggregate FATALITIES by type of EVENT
agg.fatalities <- summarize(group_by(mydata, EVENT), Total = sum(FATALITIES, na.rm = TRUE))
agg.fatalities$type <- "fatalities"
# aggregate INJURIES by type of EVENT
agg.injuries <- summarize(group_by(mydata, EVENT), Total = sum(INJURIES, na.rm = TRUE))
agg.injuries$type <- "injuries"
# combine all
agg.health <- rbind(agg.fatalities, agg.injuries)
health.by.event <- join(agg.fatalities, agg.injuries, by="EVENT", type="inner")
health.by.event
# aggregate PropDamage and CropDamage by type of EVENT
agg.propdmg.and.cropdmg <- summarize(group_by(mydata, EVENT), Total = sum(property.damage + crop.damage, na.rm = TRUE))
agg.propdmg.and.cropdmg$type <- "property and crop damage"
# aggregate PropDamage by type of EVENT
agg.prop <- summarize(group_by(mydata, EVENT), Total = sum(property.damage, na.rm = TRUE))
agg.prop$type <- "property"
# aggregate INJURIES by type of EVENT
agg.crop <- summarize(group_by(mydata, EVENT), Total = sum(crop.damage + crop.damage, na.rm = TRUE))
agg.crop$type <- "crop"
# combine all
agg.economic <- rbind(agg.prop, agg.crop)
economic.by.event <- join (agg.prop, agg.crop, by="EVENT", type="inner")
economic.by.event
# transform EVENT to factor variable for health variables
agg.health$EVENT <- as.factor(agg.health$EVENT)
# plot FATALITIES and INJURIES by EVENT
health.plot <- ggplot(agg.health, aes(x = EVENT, y = Total, fill = type)) + geom_bar(stat = "identity") +
coord_flip() +
xlab("Event Type") +
ylab("Total number of health impact") +
ggtitle("Weather event types impact on public health") +
theme(plot.title = element_text(hjust = 0.5))
print(health.plot)
agg.health,
agg.health
# # transform EVENT to factor variable for economic variables
agg.economic$EVENT <- as.factor(agg.economic$EVENT)
# plot PROPERTY damage and CROP damage by EVENT
economic.plot <- ggplot(agg.economic, aes(x = EVENT, y = Total, fill = type)) + geom_bar(stat = "identity") +
coord_flip() +
xlab("Event Type") +
ylab("Total damage in dollars") +
ggtitle("Weather event types impact on property and crop damage") +
theme(plot.title = element_text(hjust = 0.5))
print(economic.plot)
swirl()
swirl
library('swirl')
swirl()
pbeta(0.75, 2, 1)
qbeta(0.975, 2, 1)
qbeta(0.5, 1, 1)
pbinom(45,100)
pbinom(45,100,0.5)
binom.test(45,100)
pbinom(45,100,0.5,alternative="less")
binom.test(45,100,alternative="less")
binom.test(45,100,alternative="greater")
pnorm(-1)
library("UsingR")
data("father.son")
father.son
father.son$fheight
mean(father.son$fheight)
mean(father.son$fheight) + c(-1,1)*qnorm(0.975)* sd(father.son$fheight)
mean(father.son$fheight) + c(-1,1)*qnorm(0.975)* sd(father.son$fheight)/sqrt(nrow(father.son$fheight))
nrow(father.son$fheight)
mean(father.son$fheight) + c(-1,1)*qnorm(0.975)* sd(father.son$fheight)/sqrt(length(father.son$fheight))
poisson.test(10,1)
x <- 10
lambda <- 60
round(lambda + c(-1, 1) * qnorm(0.975) * sqrt(lambda/1), 3)
poisson.test(10,60)
round(5 + c(-1, 1) * qnorm(0.975) * sqrt(5/60), 3)
round(5/60 + c(-1, 1) * qnorm(0.975) * sqrt((5/60)/60, 3))
round(5/60 + c(-1, 1) * qnorm(0.975) * sqrt((5/60)/60), 3)
poisson.test(10,60)
x <- 10
t <- 60
lambda <- x/t
round(lambda + c(-1, 1) * qnorm(0.975) * sqrt(lambda/t), 3)
runif(100)
mean(runif(100))
mean(runif(100))
dnorm(10)
dnorm?
dnorm()
dnorm(10)
dnorm(5)
dnorm(5)?
dnorm?
?dnorm(5)
dnorm(0.5)
dnorm(0.75)
dnorm(0)
dnorm(seq(-5, 5, length = 1000))
max(dnorm(seq(-5, 5, length = 1000)))
dnorm(0)
xvals <- seq(-5, 5, length = k)
k<-1000
xvals <- seq(-5, 5, length = k)
dt(xvals, 2)
k<-10
xvals
xvals <- seq(-5, 5, length = k)
xvals
dt(xvals, 2)
?dt()
k<-1000
xvals <- seq(-5, 5, length = k)
y = c(dnorm(xvals), dt(xvals, df)
y = c(dnorm(xvals), dt(xvals, df))
y = c(dnorm(xvals), dt(xvals, 2))
y
data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
df<-2
data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
tail(data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k)))))
tail(data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k)))),50)
length(c(dnorm(xvals), dt(xvals, df)))
length(xvals)
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
+            x = xvals,
+            dist = factor(rep(c("Normal", "T"), c(k,k))))
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
ggplot(d, aes(x = x, y = y))
ggplot(d, aes(x = x, y = y)) + geom_line(size = 2, aes(color = dist))
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(color = dist))
g
}
library(manipulate)
library("manipulate")
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
manipulate(myplot(mu), mu = slider(1, 50, step = 1))
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x= n, y = t))
g <- g + geom_abline(size = 2, col = "lightblue")
g <- g + geom_line(size = 2, col = "black")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = qt(0.975, df))
g
}
manipulate(myplot2(df), df = slider(1, 20, step = 1))
data(sleep)
head(sleep)
sleep
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
## Calculating directly
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
t.test(extra ~ I(relevel(group, 3)), paired = TRUE, data = sleep)
t.test(extra ~ I(relevel(group, 1)), paired = TRUE, data = sleep)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(g1)^2 + (n2-1) * sd(g2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
library(datasets); data(ChickWeight); library(reshape2)
ChickWeight
dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)
names(wideCW)[-(1 : 2)]
paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
wideCW <- mutate(wideCW,
gain = time21 - time0
)
wideCW
wideCW.T
subset(wideCW, Diet %in% c(1, 4))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
t.test(g2 ~ g1, paired = TRUE)
data(mpg)
data(mtcars)
mtcars
mean(mtcars$mpg) + c(-1,1)*qt(0.975,length(mtcars)-1)*(sd(mean(mtcars$mpg))/sqrt(length(mtcars)))
mean(mtcars$mpg) + c(-1,1)*qt(0.975,length(mtcars)-1)
mean(mtcars$mpg) + c(-1,1)*qt(0.975,length(mtcars)-1)*sd(mtcars$mpg)
mean(mtcars$mpg) + c(-1,1)*qt(0.975,length(mtcars)-1)*sd(mtcars$mpg)//sqrt(length(mtcars))
mean(mtcars$mpg) + c(-1,1)*qt(0.975,length(mtcars)-1)*sd(mtcars$mpg)/sqrt(length(mtcars))
t.test(mtcars$mpg)
mean(mtcars$mpg) + c(-1,1)*qt(0.975,length(mtcars)-1)*(sd(mtcars$mpg)/sqrt(length(mtcars)))
mean(mtcars$mpg) + c(-1,1)*qt(0.975,length(mtcars))*(sd(mtcars$mpg)/sqrt(length(mtcars)))
mean(mtcars$mpg) + c(-1,1)*qt(0.975,length(mtcars)-1)*(sd(mtcars$mpg)/sqrt(length(mtcars)))
mean(mtcars$mpg) + c(-1,1)*2*qt(0.975,length(mtcars)-1)*(sd(mtcars$mpg)/sqrt(length(mtcars)))
mean(mtcars$mpg) + c(-1,1)*qt(0.975,length(mtcars)-1)*(sd(mtcars$mpg)/sqrt(length(mtcars)))
qt(0.975,length(mtcars)-1)
qnorm(0.975)
qt(0.975,16)
qt(0.975,16) * sqrt(1/9+1/9)
qt(0.975,8) * sqrt(1/9)
mtcars
new <- subset(mtcars, cyl %in% c(4,6))
new
t.test(mpg~cyl,data=new)
dcast(new, ~ cyl, value.var = "mpg")
dcast(new, mpg ~ cyl, value.var = "mpg")
dcast(new, cyl, value.var = "mpg")
dcast(new, ~cyl, value.var = "mpg")
dcast(new, disp~cyl, value.var = "mpg")
four = subset(mtcars, cyl %in% c(4))
six <- subset(mtcars, cyl %in% c(6))
four
t.test(four$mpg-six$mpg,var.equal = TRUE)
binom.test(0,8,alternative = "greater")
binom.test(0,8)
binom.test(0,8,alternative = "lesser")
binom.test(0,8,alternative = "less")
binom.test(1,8,alternative = "greater")
binom.test(1,8,alternative = "less")
binom.test(1,8,alternative = "greater")
miu <- mtcars$mpg
miu
miu <- mean(mtcars$mpg)
miu
miu + qt(0.95, length(miu)-1)
length(miu)
miu + qt(0.95, length(mtcars$mpg)-1)
?t.test()
t.test(four$mpg,six$mpg,var.equal = FALSE)
sderror<-1.1/10
3.0 * qt(0.975,99)*sderror
3.0 + c(-1,1)* qt(0.975,99)*sderror
rbinom(100,0.55)
rbinom(0.55,100)
?rbinom()
?pnorm
pnorm(-1.732)
pbinom(0.54,100,lower.tail = FALSE)
pbinom(0.54,100,.5,lower.tail = FALSE)
pbinom(54,100,lower.tail = FALSE)
pbinom(54,100,0.5,lower.tail = FALSE)
ppois(15800,520*30,lower.tail = FALSE)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1, initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
rexp(40, 0.2)
mean(rexp(40, 0.2))
a <- rep(0,1000)
a <- rep(rexp(40, 0.2),1000)
hist(a)
var(rexp(40, 0.2))
var(rexp(40, 0.2))
var(rexp(40, 0.2))
a <- rep(mean(rexp(40, 0.2)),1000)
hist(a)
a
a <- rep(o,1000)
a <- rep(0,1000)
mns = NULL
for (i in 1000) {a[i]=mean(rexp(40, 0.2))}
a
for (i in 1000) {a[i]=i+1}
a
for (i in 1000) a[i]=i+1
a
for (i in 1:1000) {a[i]=mean(rexp(40, 0.2))}
a
hist(a)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(a)
t.test(1100)
qnorm(0.975,1100,3)
qnorm(0.975,1100,3,lower.tail = FALSE)
qt(0.975,1100,3,lower.tail = FALSE)
qt(0.975,1100,3)
qt(0.975,1100,2)
t.test?
?t.test
t.test(3,4)
pbinom(3, size = 4, prob = 0.5, lower.tail = FALSE)
ppois(10/1787,0.01, lower.tail = FALSE)
10/1787
ppois(0.01,10/1787, lower.tail = FALSE)
ppois(10/1787, 0.01)
ppois(10/1787, 0.01, lower.tail = TRUE)
ppois(10/1787, 0.01, lower.tail = FALSE)
ppois(0.005595971, 0.01, lower.tail = FALSE)
1100 + c(-1,1)*qt(0.975,8)*10
data("galton")
galton
head(melt(galton))
tail(melt(galton))
table(galton$child,galton$parent)
as.data.frame(table(galton$child,galton$parent))
x <- rnorm(100)
y <- rnorm(100)
odr <- order(x)
odr[100]
odr
rnorm(100)
order(x)
x[odr[100]]
y[odr[100]]
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
data(mtcars)
lm(mtcars$mpg~mtcars$wt)
mtcars
lm(mtcars$mpg~mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x-mean(x)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
mean(c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- x - mean(x)
y <- y - mean(y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(y~x-1)
hist(runif(1000,0,6))
hist(runif(1000,0,100))
rexp(1000)
hist(rexp(1000))
hist(rexp(1000,10))
hist(rexp(1000,-10))
hist(rexp(1000,10000))
hist(rexp(1000,100))
hist(rexp(1000,0))
hist(rexp(1000))
rt(1000, 99, 0.975)
hist(rt(1000, 99, 0.975))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
summaly(lm(mpg~weight,mtcars))
summary(lm(mpg~weight,mtcars))
summary(lm(mpg~wt,mtcars))
getwd()
setwd("/Users/toluwalasheomotunde/Desktop/")
setwd("DataScienceWithR/")
file.create("spatial_analysis_tutorial.rmd")
setwd("CC-spatial-master/")
install.packages("sp")
install.packages("sp")
library(sp)
library(rgdal)
install.packages("sp")
install.packages("rgdal")
install.packages("raster")
install.packages("rasterVis")
install.packages("viridis")
library(sp)
library(rgdal)
library(raster)
getwd()
install.packages("raster")
install.packages("rasterVis")
install.packages("viridis")
install.packages("rgdal")
install.packages("rgdal")
setwd("/Users/toluwalasheomotunde/Desktop/DataScienceWithR/CC-spatial-master")
library(sp)
library(rgdal)
library(raster)
setwd("/Users/toluwalasheomotunde/Desktop/DataScienceWithR/CC-spatial-master")
library(sp)
library(raster)
setwd("/Users/toluwalasheomotunde/Desktop/DataScienceWithR/CC-spatial-master")
library(sp)
library(ggplot2)
library(viridis)
library(raster)
setwd("/Users/toluwalasheomotunde/Desktop/DataScienceWithR/CC-spatial-master")
library(sp)
library(ggplot2)
library(viridis)
library(rasterVis)
library(raster)
updateR()
